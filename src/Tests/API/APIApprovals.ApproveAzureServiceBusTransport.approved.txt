namespace NServiceBus.AzureServiceBus.Addressing
{
    
    public class CoreIndividualization : NServiceBus.AzureServiceBus.Addressing.IIndividualizationStrategy
    {
        public CoreIndividualization() { }
        public string Individualize(string endpointName) { }
    }
    public class DiscriminatorBasedIndividualization : NServiceBus.AzureServiceBus.Addressing.IIndividualizationStrategy
    {
        public DiscriminatorBasedIndividualization(NServiceBus.Settings.ReadOnlySettings settings) { }
        public string Individualize(string endpointName) { }
    }
    public enum FailOverMode
    {
        Primary = 0,
        Secondary = 1,
    }
    public class FailOverNamespacePartitioning : NServiceBus.AzureServiceBus.Addressing.INamespacePartitioningStrategy
    {
        public FailOverNamespacePartitioning(NServiceBus.Settings.ReadOnlySettings settings) { }
        public NServiceBus.AzureServiceBus.Addressing.FailOverMode Mode { get; set; }
        [System.Runtime.CompilerServices.IteratorStateMachineAttribute(typeof(NServiceBus.AzureServiceBus.Addressing.FailOverNamespacePartitioning.<GetNamespaces>d__6))]
        public System.Collections.Generic.IEnumerable<NServiceBus.AzureServiceBus.RuntimeNamespaceInfo> GetNamespaces(NServiceBus.AzureServiceBus.Addressing.PartitioningIntent partitioningIntent) { }
    }
    public class FlatComposition : NServiceBus.AzureServiceBus.Addressing.ICompositionStrategy
    {
        public FlatComposition() { }
        public string GetEntityPath(string entityname, NServiceBus.AzureServiceBus.EntityType entityType) { }
    }
    public class HierarchyComposition : NServiceBus.AzureServiceBus.Addressing.ICompositionStrategy
    {
        public HierarchyComposition(NServiceBus.Settings.ReadOnlySettings settings) { }
        public string GetEntityPath(string entityname, NServiceBus.AzureServiceBus.EntityType entityType) { }
    }
    public interface ICompositionStrategy
    {
        string GetEntityPath(string entityname, NServiceBus.AzureServiceBus.EntityType entityType);
    }
    public interface IIndividualizationStrategy
    {
        string Individualize(string endpointName);
    }
    public interface INamespacePartitioningStrategy
    {
        System.Collections.Generic.IEnumerable<NServiceBus.AzureServiceBus.RuntimeNamespaceInfo> GetNamespaces(NServiceBus.AzureServiceBus.Addressing.PartitioningIntent partitioningIntent);
    }
    public interface ISanitizationStrategy
    {
        string Sanitize(string entityPathOrName, NServiceBus.AzureServiceBus.EntityType entityType);
    }
    public enum PartitioningIntent
    {
        Receiving = 0,
        Sending = 1,
        Creating = 2,
    }
    public class RoundRobinNamespacePartitioning : NServiceBus.AzureServiceBus.Addressing.INamespacePartitioningStrategy
    {
        public RoundRobinNamespacePartitioning(NServiceBus.Settings.ReadOnlySettings settings) { }
        [System.Runtime.CompilerServices.IteratorStateMachineAttribute(typeof(NServiceBus.AzureServiceBus.Addressing.RoundRobinNamespacePartitioning.<GetNamespaces>d__2))]
        public System.Collections.Generic.IEnumerable<NServiceBus.AzureServiceBus.RuntimeNamespaceInfo> GetNamespaces(NServiceBus.AzureServiceBus.Addressing.PartitioningIntent partitioningIntent) { }
    }
    public class SingleNamespacePartitioning : NServiceBus.AzureServiceBus.Addressing.INamespacePartitioningStrategy
    {
        public SingleNamespacePartitioning(NServiceBus.Settings.ReadOnlySettings settings) { }
        [System.Runtime.CompilerServices.IteratorStateMachineAttribute(typeof(NServiceBus.AzureServiceBus.Addressing.SingleNamespacePartitioning.<GetNamespaces>d__2))]
        public System.Collections.Generic.IEnumerable<NServiceBus.AzureServiceBus.RuntimeNamespaceInfo> GetNamespaces(NServiceBus.AzureServiceBus.Addressing.PartitioningIntent partitioningIntent) { }
    }
    public class ThrowOnFailedValidation : NServiceBus.AzureServiceBus.Addressing.ISanitizationStrategy
    {
        public ThrowOnFailedValidation(NServiceBus.Settings.ReadOnlySettings settings) { }
        public string Sanitize(string entityPathOrName, NServiceBus.AzureServiceBus.EntityType entityType) { }
    }
    public class ValidateAndHashIfNeeded : NServiceBus.AzureServiceBus.Addressing.ISanitizationStrategy
    {
        public ValidateAndHashIfNeeded(NServiceBus.Settings.ReadOnlySettings settings) { }
        public string Sanitize(string entityPathOrName, NServiceBus.AzureServiceBus.EntityType entityType) { }
    }
    public class ValidationResult
    {
        public ValidationResult() { }
        public bool CharactersAreValid { get; }
        public string CharactersError { get; set; }
        public bool IsValid { get; }
        public string LengthError { get; set; }
        public bool LengthIsValid { get; }
        public void AddErrorForInvalidCharacters(string error) { }
        public void AddErrorForInvalidLenth(string error) { }
    }
}
namespace NServiceBus.AzureServiceBus
{
    
    public class Batch
    {
        public Batch() { }
        public NServiceBus.AzureServiceBus.TopologySection Destinations { get; set; }
        public System.Collections.Generic.IList<NServiceBus.AzureServiceBus.BatchedOperation> Operations { get; set; }
        public NServiceBus.Transports.DispatchConsistency RequiredDispatchConsistency { get; set; }
    }
    public class BatchedOperation
    {
        public BatchedOperation(int messageSizePaddingPercentage = 0) { }
        public System.Collections.Generic.IEnumerable<NServiceBus.DeliveryConstraints.DeliveryConstraint> DeliveryConstraints { get; set; }
        public NServiceBus.Transports.OutgoingMessage Message { get; set; }
        public long GetEstimatedSize() { }
    }
    public class BrokeredMessageReceiveContext : NServiceBus.AzureServiceBus.ReceiveContext
    {
        public BrokeredMessageReceiveContext() { }
        public NServiceBus.AzureServiceBus.EntityInfo Entity { get; set; }
        public Microsoft.ServiceBus.Messaging.BrokeredMessage IncomingBrokeredMessage { get; set; }
        public Microsoft.ServiceBus.Messaging.ReceiveMode ReceiveMode { get; set; }
    }
    public class EndpointOrientedTopology : NServiceBus.AzureServiceBus.ITopology
    {
        public EndpointOrientedTopology() { }
        public bool HasNativePubSubSupport { get; }
        public bool HasSupportForCentralizedPubSub { get; }
        public NServiceBus.Routing.EndpointInstance BindToLocalEndpoint(NServiceBus.Routing.EndpointInstance instance) { }
        public System.Func<NServiceBus.Transports.IDispatchMessages> GetDispatcherFactory() { }
        public System.Func<NServiceBus.Transports.IPushMessages> GetMessagePumpFactory() { }
        public NServiceBus.Transports.OutboundRoutingPolicy GetOutboundRoutingPolicy() { }
        public System.Func<NServiceBus.Transports.ICreateQueues> GetQueueCreatorFactory() { }
        public System.Func<NServiceBus.Transports.IManageSubscriptions> GetSubscriptionManagerFactory() { }
        public void Initialize(NServiceBus.Settings.SettingsHolder settings) { }
        public System.Threading.Tasks.Task<NServiceBus.Transports.StartupCheckResult> RunPreStartupChecks() { }
    }
    public class EntityInfo
    {
        public EntityInfo() { }
        public NServiceBus.AzureServiceBus.RuntimeNamespaceInfo Namespace { get; set; }
        public string Path { get; set; }
        public System.Collections.Generic.IList<NServiceBus.AzureServiceBus.EntityRelationShipInfo> RelationShips { get; }
        public bool ShouldBeListenedTo { get; set; }
        public NServiceBus.AzureServiceBus.EntityType Type { get; set; }
        protected bool Equals(NServiceBus.AzureServiceBus.EntityInfo other) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
    }
    public class EntityRelationShipInfo
    {
        public EntityRelationShipInfo() { }
        public NServiceBus.AzureServiceBus.EntityInfo Source { get; set; }
        public NServiceBus.AzureServiceBus.EntityInfo Target { get; set; }
        public NServiceBus.AzureServiceBus.EntityRelationShipType Type { get; set; }
    }
    public enum EntityRelationShipType
    {
        Forward = 0,
        Subscription = 1,
    }
    public enum EntityType
    {
        Queue = 0,
        Topic = 1,
        Subscription = 2,
        Rule = 3,
    }
    public class ForwardingTopology : NServiceBus.AzureServiceBus.ITopology
    {
        public ForwardingTopology() { }
        public bool HasNativePubSubSupport { get; }
        public bool HasSupportForCentralizedPubSub { get; }
        public NServiceBus.Routing.EndpointInstance BindToLocalEndpoint(NServiceBus.Routing.EndpointInstance instance) { }
        public System.Func<NServiceBus.Transports.IDispatchMessages> GetDispatcherFactory() { }
        public System.Func<NServiceBus.Transports.IPushMessages> GetMessagePumpFactory() { }
        public NServiceBus.Transports.OutboundRoutingPolicy GetOutboundRoutingPolicy() { }
        public System.Func<NServiceBus.Transports.ICreateQueues> GetQueueCreatorFactory() { }
        public System.Func<NServiceBus.Transports.IManageSubscriptions> GetSubscriptionManagerFactory() { }
        public void Initialize(NServiceBus.Settings.SettingsHolder settings) { }
        public async System.Threading.Tasks.Task<NServiceBus.Transports.StartupCheckResult> RunPreStartupChecks() { }
    }
    public interface IBatcher
    {
        System.Collections.Generic.IList<NServiceBus.AzureServiceBus.Batch> ToBatches(NServiceBus.Transports.TransportOperations operations);
    }
    public interface IBrokerSideSubscriptionFilter
    {
        string Serialize();
    }
    public interface IClientEntity
    {
        bool IsClosed { get; }
        Microsoft.ServiceBus.RetryPolicy RetryPolicy { get; set; }
    }
    public interface IClientSideSubscriptionFilter
    {
        bool Execute(object message);
    }
    public interface IConvertBrokeredMessagesToIncomingMessages
    {
        NServiceBus.AzureServiceBus.IncomingMessageDetails Convert(Microsoft.ServiceBus.Messaging.BrokeredMessage brokeredMessage);
    }
    public interface IConvertOutgoingMessagesToBrokeredMessages
    {
        System.Collections.Generic.IEnumerable<Microsoft.ServiceBus.Messaging.BrokeredMessage> Convert(System.Collections.Generic.IEnumerable<NServiceBus.AzureServiceBus.BatchedOperation> outgoingOperations, NServiceBus.AzureServiceBus.RoutingOptions routingOptions);
    }
    public interface ICreateAzureServiceBusQueues
    {
        System.Threading.Tasks.Task<Microsoft.ServiceBus.Messaging.QueueDescription> Create(string queuePath, NServiceBus.AzureServiceBus.INamespaceManager namespaceManager);
    }
    public interface ICreateAzureServiceBusSubscriptions
    {
        System.Threading.Tasks.Task<Microsoft.ServiceBus.Messaging.SubscriptionDescription> Create(string topicPath, string subscriptionName, NServiceBus.AzureServiceBus.SubscriptionMetadata metadata, string sqlFilter, NServiceBus.AzureServiceBus.INamespaceManager namespaceManager, string forwardTo);
    }
    public interface ICreateAzureServiceBusTopics
    {
        System.Threading.Tasks.Task<Microsoft.ServiceBus.Messaging.TopicDescription> Create(string topicPath, NServiceBus.AzureServiceBus.INamespaceManager namespaceManager);
    }
    public interface ICreateMessageReceivers
    {
        System.Threading.Tasks.Task<NServiceBus.AzureServiceBus.IMessageReceiver> Create(string entitypath, string namespaceName);
    }
    public interface ICreateMessageSenders
    {
        System.Threading.Tasks.Task<NServiceBus.AzureServiceBus.IMessageSender> Create(string entitypath, string viaEntityPath, string namespaceName);
    }
    public interface ICreateMessagingFactories
    {
        NServiceBus.AzureServiceBus.IMessagingFactory Create(string namespaceName);
    }
    public interface ICreateNamespaceManagers
    {
        NServiceBus.AzureServiceBus.INamespaceManager Create(string namespaceName);
    }
    public interface ICreateTopology
    {
        System.Threading.Tasks.Task Create(NServiceBus.AzureServiceBus.TopologySection topology);
    }
    public interface IHandleOversizedBrokeredMessages
    {
        System.Threading.Tasks.Task Handle(Microsoft.ServiceBus.Messaging.BrokeredMessage brokeredMessage);
    }
    public interface IManageMessageReceiverLifeCycle
    {
        NServiceBus.AzureServiceBus.IMessageReceiver Get(string entitypath, string namespaceName);
    }
    public interface IManageMessageSenderLifeCycle
    {
        NServiceBus.AzureServiceBus.IMessageSender Get(string entitypath, string viaEntityPath, string namespaceName);
    }
    public interface IManageMessagingFactoryLifeCycle
    {
        System.Threading.Tasks.Task CloseAll();
        NServiceBus.AzureServiceBus.IMessagingFactory Get(string namespaceName);
    }
    public interface IManageNamespaceManagerLifeCycle
    {
        NServiceBus.AzureServiceBus.INamespaceManager Get(string namespaceName);
    }
    public interface IMessageReceiver : NServiceBus.AzureServiceBus.IClientEntity
    {
        Microsoft.ServiceBus.Messaging.ReceiveMode Mode { get; }
        int PrefetchCount { get; set; }
        System.Threading.Tasks.Task CloseAsync();
        System.Threading.Tasks.Task CompleteBatchAsync(System.Collections.Generic.IEnumerable<System.Guid> lockTokens);
        void OnMessage(System.Func<Microsoft.ServiceBus.Messaging.BrokeredMessage, System.Threading.Tasks.Task> callback, Microsoft.ServiceBus.Messaging.OnMessageOptions options);
    }
    public interface IMessageSender : NServiceBus.AzureServiceBus.IClientEntity
    {
        System.Threading.Tasks.Task Send(Microsoft.ServiceBus.Messaging.BrokeredMessage message);
        System.Threading.Tasks.Task SendBatch(System.Collections.Generic.IEnumerable<Microsoft.ServiceBus.Messaging.BrokeredMessage> messages);
    }
    public interface IMessagingFactory : NServiceBus.AzureServiceBus.IClientEntity
    {
        System.Threading.Tasks.Task CloseAsync();
        System.Threading.Tasks.Task<NServiceBus.AzureServiceBus.IMessageReceiver> CreateMessageReceiver(string entitypath, Microsoft.ServiceBus.Messaging.ReceiveMode receiveMode);
        System.Threading.Tasks.Task<NServiceBus.AzureServiceBus.IMessageSender> CreateMessageSender(string entitypath);
        System.Threading.Tasks.Task<NServiceBus.AzureServiceBus.IMessageSender> CreateMessageSender(string entitypath, string viaEntityPath);
    }
    public interface INamespaceManager
    {
        System.Uri Address { get; }
        Microsoft.ServiceBus.NamespaceManagerSettings Settings { get; }
        System.Threading.Tasks.Task<bool> CanManageEntities();
        System.Threading.Tasks.Task CreateQueue(Microsoft.ServiceBus.Messaging.QueueDescription description);
        System.Threading.Tasks.Task<Microsoft.ServiceBus.Messaging.SubscriptionDescription> CreateSubscription(Microsoft.ServiceBus.Messaging.SubscriptionDescription subscriptionDescription, string sqlFilter);
        System.Threading.Tasks.Task<Microsoft.ServiceBus.Messaging.SubscriptionDescription> CreateSubscription(Microsoft.ServiceBus.Messaging.SubscriptionDescription subscriptionDescription, Microsoft.ServiceBus.Messaging.RuleDescription ruleDescription);
        System.Threading.Tasks.Task<Microsoft.ServiceBus.Messaging.TopicDescription> CreateTopic(Microsoft.ServiceBus.Messaging.TopicDescription topicDescription);
        System.Threading.Tasks.Task DeleteQueue(string path);
        System.Threading.Tasks.Task DeleteTopic(string path);
        System.Threading.Tasks.Task<Microsoft.ServiceBus.Messaging.QueueDescription> GetQueue(string path);
        System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.ServiceBus.Messaging.RuleDescription>> GetRules(Microsoft.ServiceBus.Messaging.SubscriptionDescription subscriptionDescription);
        System.Threading.Tasks.Task<Microsoft.ServiceBus.Messaging.SubscriptionDescription> GetSubscription(string topicPath, string subscriptionName);
        System.Threading.Tasks.Task<Microsoft.ServiceBus.Messaging.TopicDescription> GetTopic(string path);
        System.Threading.Tasks.Task<bool> QueueExists(string path);
        System.Threading.Tasks.Task<bool> SubscriptionExists(string topicPath, string subscriptionName);
        System.Threading.Tasks.Task<bool> TopicExists(string path);
        System.Threading.Tasks.Task UpdateQueue(Microsoft.ServiceBus.Messaging.QueueDescription description);
        System.Threading.Tasks.Task<Microsoft.ServiceBus.Messaging.SubscriptionDescription> UpdateSubscription(Microsoft.ServiceBus.Messaging.SubscriptionDescription subscriptionDescription);
        System.Threading.Tasks.Task<Microsoft.ServiceBus.Messaging.TopicDescription> UpdateTopic(Microsoft.ServiceBus.Messaging.TopicDescription topicDescription);
    }
    public class IncomingMessageDetails
    {
        public IncomingMessageDetails(string messageId, System.Collections.Generic.Dictionary<string, string> headers, System.IO.Stream bodyStream) { }
        public System.IO.Stream BodyStream { get; }
        public System.Collections.Generic.Dictionary<string, string> Headers { get; }
        public string MessageId { get; }
    }
    public interface INotifyIncomingMessages
    {
        bool IsRunning { get; }
        int RefCount { get; set; }
        void Initialize(NServiceBus.AzureServiceBus.EntityInfo entity, System.Func<NServiceBus.AzureServiceBus.IncomingMessageDetails, NServiceBus.AzureServiceBus.ReceiveContext, System.Threading.Tasks.Task> callback, System.Func<System.Exception, System.Threading.Tasks.Task> errorCallback, int maximumConcurrency);
        void Start();
        System.Threading.Tasks.Task Stop();
    }
    public interface IOperateTopology
    {
        void OnError(System.Func<System.Exception, System.Threading.Tasks.Task> func);
        void OnIncomingMessage(System.Func<NServiceBus.AzureServiceBus.IncomingMessageDetails, NServiceBus.AzureServiceBus.ReceiveContext, System.Threading.Tasks.Task> func);
        void Start(NServiceBus.AzureServiceBus.TopologySection topology, int maximumConcurrency);
        void Start(System.Collections.Generic.IEnumerable<NServiceBus.AzureServiceBus.EntityInfo> subscriptions);
        System.Threading.Tasks.Task Stop();
        System.Threading.Tasks.Task Stop(System.Collections.Generic.IEnumerable<NServiceBus.AzureServiceBus.EntityInfo> subscriptions);
    }
    public interface IRegisterTransportParts
    {
        void Register<T>();
        void Register(System.Type t);
        void Register<T>(System.Func<object> func);
        void Register(System.Type t, System.Func<object> func);
        void RegisterSingleton<T>();
        void RegisterSingleton(System.Type t);
    }
    public interface IResolveTransportParts
    {
        object Resolve(System.Type typeToBuild);
        T Resolve<T>();
        System.Collections.Generic.IEnumerable<T> ResolveAll<T>();
        System.Collections.Generic.IEnumerable<object> ResolveAll(System.Type typeToBuild);
    }
    public interface IRouteOutgoingBatches
    {
        System.Threading.Tasks.Task RouteBatch(NServiceBus.AzureServiceBus.Batch batch, NServiceBus.AzureServiceBus.ReceiveContext receiveContext);
        System.Threading.Tasks.Task RouteBatches(System.Collections.Generic.IEnumerable<NServiceBus.AzureServiceBus.Batch> outgoingBatches, NServiceBus.AzureServiceBus.ReceiveContext receiveContext);
    }
    public interface ITopology
    {
        bool HasNativePubSubSupport { get; }
        bool HasSupportForCentralizedPubSub { get; }
        NServiceBus.Routing.EndpointInstance BindToLocalEndpoint(NServiceBus.Routing.EndpointInstance instance);
        System.Func<NServiceBus.Transports.IDispatchMessages> GetDispatcherFactory();
        System.Func<NServiceBus.Transports.IPushMessages> GetMessagePumpFactory();
        NServiceBus.Transports.OutboundRoutingPolicy GetOutboundRoutingPolicy();
        System.Func<NServiceBus.Transports.ICreateQueues> GetQueueCreatorFactory();
        System.Func<NServiceBus.Transports.IManageSubscriptions> GetSubscriptionManagerFactory();
        void Initialize(NServiceBus.Settings.SettingsHolder settings);
        System.Threading.Tasks.Task<NServiceBus.Transports.StartupCheckResult> RunPreStartupChecks();
    }
    public interface ITopologySectionManager
    {
        NServiceBus.AzureServiceBus.TopologySection DeterminePublishDestination(System.Type eventType);
        NServiceBus.AzureServiceBus.TopologySection DetermineReceiveResources(string inputQueue);
        NServiceBus.AzureServiceBus.TopologySection DetermineResourcesToCreate();
        NServiceBus.AzureServiceBus.TopologySection DetermineResourcesToSubscribeTo(System.Type eventType);
        NServiceBus.AzureServiceBus.TopologySection DetermineResourcesToUnsubscribeFrom(System.Type eventtype);
        NServiceBus.AzureServiceBus.TopologySection DetermineSendDestination(string destination);
    }
    public interface ITransportPartsContainer : NServiceBus.AzureServiceBus.IRegisterTransportParts, NServiceBus.AzureServiceBus.IResolveTransportParts { }
    public class MessageTooLargeException : System.Exception
    {
        public MessageTooLargeException() { }
        public MessageTooLargeException(string message) { }
        public MessageTooLargeException(string message, System.Exception inner) { }
        protected MessageTooLargeException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }
    }
    public class NamespaceConfigurations : System.Collections.Generic.IEnumerable<NServiceBus.AzureServiceBus.NamespaceInfo>, System.Collections.IEnumerable
    {
        public NamespaceConfigurations() { }
        public int Count { get; }
        public void Add(string name, string connectionString, NServiceBus.AzureServiceBus.NamespacePurpose purpose) { }
        public string GetConnectionString(string name) { }
        public System.Collections.Generic.IEnumerator<NServiceBus.AzureServiceBus.NamespaceInfo> GetEnumerator() { }
    }
    public class NamespaceInfo : System.IEquatable<NServiceBus.AzureServiceBus.NamespaceInfo>
    {
        public NamespaceInfo(string name, string connectionString, NServiceBus.AzureServiceBus.NamespacePurpose purpose = 1) { }
        public NServiceBus.AzureServiceBus.Topology.MetaModel.ConnectionString ConnectionString { get; }
        public string Name { get; }
        public NServiceBus.AzureServiceBus.NamespacePurpose Purpose { get; }
        public bool Equals(NServiceBus.AzureServiceBus.NamespaceInfo other) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
    }
    public class NamespaceManagerAdapter : NServiceBus.AzureServiceBus.INamespaceManager
    {
        public NamespaceManagerAdapter(Microsoft.ServiceBus.NamespaceManager manager) { }
        public System.Uri Address { get; }
        public Microsoft.ServiceBus.NamespaceManagerSettings Settings { get; }
        public async System.Threading.Tasks.Task<bool> CanManageEntities() { }
        public System.Threading.Tasks.Task CreateQueue(Microsoft.ServiceBus.Messaging.QueueDescription description) { }
        public System.Threading.Tasks.Task<Microsoft.ServiceBus.Messaging.SubscriptionDescription> CreateSubscription(Microsoft.ServiceBus.Messaging.SubscriptionDescription subscriptionDescription, string sqlFilter) { }
        public System.Threading.Tasks.Task<Microsoft.ServiceBus.Messaging.SubscriptionDescription> CreateSubscription(Microsoft.ServiceBus.Messaging.SubscriptionDescription subscriptionDescription, Microsoft.ServiceBus.Messaging.RuleDescription ruleDescription) { }
        public System.Threading.Tasks.Task<Microsoft.ServiceBus.Messaging.TopicDescription> CreateTopic(Microsoft.ServiceBus.Messaging.TopicDescription topicDescription) { }
        public System.Threading.Tasks.Task DeleteQueue(string path) { }
        public System.Threading.Tasks.Task DeleteSubscriptionAsync(string topicPath, string subscriptionName) { }
        public System.Threading.Tasks.Task DeleteTopic(string path) { }
        public System.Threading.Tasks.Task<Microsoft.ServiceBus.Messaging.QueueDescription> GetQueue(string path) { }
        public System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.ServiceBus.Messaging.RuleDescription>> GetRules(Microsoft.ServiceBus.Messaging.SubscriptionDescription subscriptionDescription) { }
        public System.Threading.Tasks.Task<Microsoft.ServiceBus.Messaging.SubscriptionDescription> GetSubscription(string topicPath, string subscriptionName) { }
        public System.Threading.Tasks.Task<Microsoft.ServiceBus.Messaging.TopicDescription> GetTopic(string path) { }
        public System.Threading.Tasks.Task<bool> QueueExists(string path) { }
        public System.Threading.Tasks.Task<bool> SubscriptionExists(string topicPath, string subscriptionName) { }
        public System.Threading.Tasks.Task<bool> TopicExists(string path) { }
        public System.Threading.Tasks.Task UpdateQueue(Microsoft.ServiceBus.Messaging.QueueDescription description) { }
        public System.Threading.Tasks.Task<Microsoft.ServiceBus.Messaging.SubscriptionDescription> UpdateSubscription(Microsoft.ServiceBus.Messaging.SubscriptionDescription subscriptionDescription) { }
        public System.Threading.Tasks.Task<Microsoft.ServiceBus.Messaging.TopicDescription> UpdateTopic(Microsoft.ServiceBus.Messaging.TopicDescription topicDescription) { }
    }
    public enum NamespaceMode
    {
        Active = 0,
        Passive = 1,
    }
    public enum NamespacePurpose
    {
        Routing = 0,
        Partitioning = 1,
    }
    public abstract class ReceiveContext
    {
        protected ReceiveContext() { }
        public System.Threading.CancellationToken CancellationToken { get; set; }
        public System.Collections.Generic.IList<System.Func<System.Threading.Tasks.Task>> OnComplete { get; set; }
    }
    public class RoutingOptions
    {
        public RoutingOptions() { }
        public bool SendVia { get; set; }
        public string ViaConnectionString { get; set; }
        public string ViaEntityPath { get; set; }
        public string ViaPartitionKey { get; set; }
    }
    public class RuntimeNamespaceInfo : System.IEquatable<NServiceBus.AzureServiceBus.RuntimeNamespaceInfo>
    {
        public RuntimeNamespaceInfo(string name, string connectionString, NServiceBus.AzureServiceBus.NamespacePurpose purpose = 1, NServiceBus.AzureServiceBus.NamespaceMode mode = 0) { }
        public string ConnectionString { get; }
        public NServiceBus.AzureServiceBus.NamespaceMode Mode { get; }
        public string Name { get; }
        public bool Equals(NServiceBus.AzureServiceBus.RuntimeNamespaceInfo other) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
    }
    public class SubscriptionInfo : NServiceBus.AzureServiceBus.EntityInfo
    {
        public SubscriptionInfo() { }
        public NServiceBus.AzureServiceBus.IBrokerSideSubscriptionFilter BrokerSideFilter { get; set; }
        public NServiceBus.AzureServiceBus.IClientSideSubscriptionFilter ClientSideFilter { get; set; }
        public NServiceBus.AzureServiceBus.SubscriptionMetadata Metadata { get; set; }
    }
    public class SubscriptionMetadata
    {
        public SubscriptionMetadata() { }
        public string Description { get; set; }
        public string SubscriptionNameBasedOnEventWithNamespace { get; set; }
    }
    public enum SupportedBrokeredMessageBodyTypes
    {
        ByteArray = 0,
        Stream = 1,
    }
    public class ThrowOnOversizedBrokeredMessages : NServiceBus.AzureServiceBus.IHandleOversizedBrokeredMessages
    {
        public ThrowOnOversizedBrokeredMessages() { }
        public System.Threading.Tasks.Task Handle(Microsoft.ServiceBus.Messaging.BrokeredMessage brokeredMessage) { }
    }
    public class TopologySection
    {
        public TopologySection() { }
        public System.Collections.Generic.IEnumerable<NServiceBus.AzureServiceBus.EntityInfo> Entities { get; set; }
        public System.Collections.Generic.IEnumerable<NServiceBus.AzureServiceBus.RuntimeNamespaceInfo> Namespaces { get; set; }
        public System.Collections.Generic.IEnumerable<NServiceBus.AzureServiceBus.EntityRelationShipInfo> Relationships { get; set; }
    }
    public class UnsupportedBrokeredMessageBodyTypeException : System.Exception
    {
        public UnsupportedBrokeredMessageBodyTypeException() { }
        public UnsupportedBrokeredMessageBodyTypeException(string message) { }
        public UnsupportedBrokeredMessageBodyTypeException(string message, System.Exception innerException) { }
        protected UnsupportedBrokeredMessageBodyTypeException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }
    }
}
namespace NServiceBus.AzureServiceBus.Topology.MetaModel
{
    
    public class ConnectionString : System.IEquatable<NServiceBus.AzureServiceBus.Topology.MetaModel.ConnectionString>
    {
        public static readonly string Sample;
        public ConnectionString(string value) { }
        public string NamespaceName { get; }
        public string SharedAccessPolicyName { get; }
        public string SharedAccessPolicyValue { get; }
        public bool Equals(NServiceBus.AzureServiceBus.Topology.MetaModel.ConnectionString other) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public static bool IsConnectionString(string value) { }
        public override string ToString() { }
        public static bool TryParse(string value, out NServiceBus.AzureServiceBus.Topology.MetaModel.ConnectionString connectionString) { }
    }
}
namespace NServiceBus
{
    
    public class AzureServiceBusCompositionExtensionPoint<T> : NServiceBus.Configuration.AdvanceExtensibility.ExposeSettings
        where T : NServiceBus.AzureServiceBus.Addressing.ICompositionStrategy
    {
        public AzureServiceBusCompositionExtensionPoint(NServiceBus.Settings.SettingsHolder settings) { }
    }
    public class AzureServiceBusCompositionSettings : NServiceBus.Configuration.AdvanceExtensibility.ExposeSettings
    {
        public AzureServiceBusCompositionSettings(NServiceBus.Settings.SettingsHolder settings) { }
        public NServiceBus.AzureServiceBusCompositionExtensionPoint<T> UseStrategy<T>()
            where T : NServiceBus.AzureServiceBus.Addressing.ICompositionStrategy { }
    }
    public class static AzureServiceBusDiscriminatorBasedIndividualizationSettingsExtensions
    {
        public static NServiceBus.AzureServiceBusIndividualizationExtensionPoint<NServiceBus.AzureServiceBus.Addressing.DiscriminatorBasedIndividualization> DiscriminatorGenerator(this NServiceBus.AzureServiceBusIndividualizationExtensionPoint<NServiceBus.AzureServiceBus.Addressing.DiscriminatorBasedIndividualization> individualizationStrategy, System.Func<string, string> discriminatorGenerator) { }
    }
    public class static AzureServiceBusEndpointOrientedTopologySettingsExtensions
    {
        public static NServiceBus.AzureServiceBusTopologySettings<NServiceBus.AzureServiceBus.EndpointOrientedTopology> RegisterPublisher(this NServiceBus.AzureServiceBusTopologySettings<NServiceBus.AzureServiceBus.EndpointOrientedTopology> topologySettings, System.Type type, string publisherName) { }
        public static NServiceBus.AzureServiceBusTopologySettings<NServiceBus.AzureServiceBus.EndpointOrientedTopology> RegisterPublisher(this NServiceBus.AzureServiceBusTopologySettings<NServiceBus.AzureServiceBus.EndpointOrientedTopology> topologySettings, System.Reflection.Assembly assembly, string publisherName) { }
    }
    public class static AzureServiceBusForwardingTopologySettingsExtensions
    {
        public static NServiceBus.AzureServiceBusTopologySettings<NServiceBus.AzureServiceBus.ForwardingTopology> BundlePrefix(this NServiceBus.AzureServiceBusTopologySettings<NServiceBus.AzureServiceBus.ForwardingTopology> topologySettings, string prefix) { }
        public static NServiceBus.AzureServiceBusTopologySettings<NServiceBus.AzureServiceBus.ForwardingTopology> NumberOfEntitiesInBundle(this NServiceBus.AzureServiceBusTopologySettings<NServiceBus.AzureServiceBus.ForwardingTopology> topologySettings, int number) { }
    }
    public class static AzureServiceBusHierarchyCompositionSettingsExtensions
    {
        public static NServiceBus.AzureServiceBusCompositionExtensionPoint<NServiceBus.AzureServiceBus.Addressing.HierarchyComposition> PathGenerator(this NServiceBus.AzureServiceBusCompositionExtensionPoint<NServiceBus.AzureServiceBus.Addressing.HierarchyComposition> composition, System.Func<string, string> pathGenerator) { }
    }
    public class AzureServiceBusIndividualizationExtensionPoint<T> : NServiceBus.Configuration.AdvanceExtensibility.ExposeSettings
        where T : NServiceBus.AzureServiceBus.Addressing.IIndividualizationStrategy
    {
        public AzureServiceBusIndividualizationExtensionPoint(NServiceBus.Settings.SettingsHolder settings) { }
    }
    public class AzureServiceBusIndividualizationSettings : NServiceBus.Configuration.AdvanceExtensibility.ExposeSettings
    {
        public AzureServiceBusIndividualizationSettings(NServiceBus.Settings.SettingsHolder settings) { }
        public NServiceBus.AzureServiceBusIndividualizationExtensionPoint<T> UseStrategy<T>()
            where T : NServiceBus.AzureServiceBus.Addressing.IIndividualizationStrategy { }
    }
    public class AzureServiceBusMessageReceiverSettings : NServiceBus.Configuration.AdvanceExtensibility.ExposeSettings
    {
        public AzureServiceBusMessageReceiverSettings(NServiceBus.Settings.SettingsHolder settings) { }
        public NServiceBus.AzureServiceBusMessageReceiverSettings AutoRenewTimeout(System.TimeSpan autoRenewTimeout) { }
        public NServiceBus.AzureServiceBusMessageReceiverSettings PrefetchCount(int prefetchCount) { }
        public NServiceBus.AzureServiceBusMessageReceiverSettings ReceiveMode(Microsoft.ServiceBus.Messaging.ReceiveMode receiveMode) { }
        public NServiceBus.AzureServiceBusMessageReceiverSettings RetryPolicy(Microsoft.ServiceBus.RetryPolicy retryPolicy) { }
    }
    public class AzureServiceBusMessageSenderSettings : NServiceBus.Configuration.AdvanceExtensibility.ExposeSettings
    {
        public AzureServiceBusMessageSenderSettings(NServiceBus.Settings.SettingsHolder settings) { }
        public NServiceBus.AzureServiceBusMessageSenderSettings BackOffTimeOnThrottle(System.TimeSpan backoffTime) { }
        public NServiceBus.AzureServiceBusMessageSenderSettings MaximuMessageSizeInKilobytes(int sizeInKilobytes) { }
        public NServiceBus.AzureServiceBusMessageSenderSettings MessageSizePaddingPercentage(int percentage) { }
        public NServiceBus.AzureServiceBusMessageSenderSettings OversizedBrokeredMessageHandler<T>(T instance)
            where T : NServiceBus.AzureServiceBus.IHandleOversizedBrokeredMessages { }
        public NServiceBus.AzureServiceBusMessageSenderSettings RetryAttemptsOnThrottle(int count) { }
        public NServiceBus.AzureServiceBusMessageSenderSettings RetryPolicy(Microsoft.ServiceBus.RetryPolicy retryPolicy) { }
    }
    public class AzureServiceBusMessagingFactoriesSettings : NServiceBus.Configuration.AdvanceExtensibility.ExposeSettings
    {
        public AzureServiceBusMessagingFactoriesSettings(NServiceBus.Settings.SettingsHolder settings) { }
        public NServiceBus.AzureServiceBusMessagingFactoriesSettings BatchFlushInterval(System.TimeSpan batchFlushInterval) { }
        public NServiceBus.AzureServiceBusMessagingFactoriesSettings MessagingFactorySettingsFactory(System.Func<string, Microsoft.ServiceBus.Messaging.MessagingFactorySettings> factory) { }
        public NServiceBus.AzureServiceBusMessagingFactoriesSettings NumberOfMessagingFactoriesPerNamespace(int number) { }
        public NServiceBus.AzureServiceBusMessagingFactoriesSettings RetryPolicy(Microsoft.ServiceBus.RetryPolicy retryPolicy) { }
    }
    public class AzureServiceBusNamespaceManagersSettings : NServiceBus.Configuration.AdvanceExtensibility.ExposeSettings
    {
        public AzureServiceBusNamespaceManagersSettings(NServiceBus.Settings.SettingsHolder settings) { }
        public NServiceBus.AzureServiceBusNamespaceManagersSettings NamespaceManagerSettingsFactory(System.Func<string, Microsoft.ServiceBus.NamespaceManagerSettings> factory) { }
        public NServiceBus.AzureServiceBusNamespaceManagersSettings RetryPolicy(Microsoft.ServiceBus.RetryPolicy retryPolicy) { }
        public NServiceBus.AzureServiceBusNamespaceManagersSettings TokenProvider(System.Func<string, Microsoft.ServiceBus.TokenProvider> factory) { }
    }
    public class AzureServiceBusNamespacePartitioningSettings : NServiceBus.Configuration.AdvanceExtensibility.ExposeSettings
    {
        public AzureServiceBusNamespacePartitioningSettings(NServiceBus.Settings.SettingsHolder settings) { }
        public void AddNamespace(string name, string connectionString) { }
        public NServiceBus.AzureServiceBusNamespacePartitioningSettings UseStrategy<T>()
            where T : NServiceBus.AzureServiceBus.Addressing.INamespacePartitioningStrategy { }
    }
    public class AzureServiceBusNamespaceRoutingSettings : NServiceBus.Configuration.AdvanceExtensibility.ExposeSettings
    {
        public AzureServiceBusNamespaceRoutingSettings(NServiceBus.Settings.SettingsHolder settings) { }
        public void AddNamespace(string name, string connectionString) { }
    }
    public class AzureServiceBusQueueSettings : NServiceBus.Configuration.AdvanceExtensibility.ExposeSettings
    {
        public AzureServiceBusQueueSettings(NServiceBus.Settings.SettingsHolder settings) { }
        public NServiceBus.AzureServiceBusQueueSettings AutoDeleteOnIdle(System.TimeSpan autoDeleteOnIdle) { }
        public NServiceBus.AzureServiceBusQueueSettings DefaultMessageTimeToLive(System.TimeSpan defaultMessageTimeToLive) { }
        public NServiceBus.AzureServiceBusQueueSettings DescriptionFactory(System.Func<string, NServiceBus.Settings.ReadOnlySettings, Microsoft.ServiceBus.Messaging.QueueDescription> factory) { }
        public NServiceBus.AzureServiceBusQueueSettings DuplicateDetectionHistoryTimeWindow(System.TimeSpan duplicateDetectionHistoryTimeWindow) { }
        public NServiceBus.AzureServiceBusQueueSettings EnableBatchedOperations(bool enableBatchedOperations) { }
        public NServiceBus.AzureServiceBusQueueSettings EnableDeadLetteringOnMessageExpiration(bool enableDeadLetteringOnMessageExpiration) { }
        public NServiceBus.AzureServiceBusQueueSettings EnableExpress(bool enableExpress) { }
        public NServiceBus.AzureServiceBusQueueSettings EnableExpress(System.Func<string, bool> condition, bool enableExpress) { }
        public NServiceBus.AzureServiceBusQueueSettings EnablePartitioning(bool enablePartitioning) { }
        public NServiceBus.AzureServiceBusQueueSettings ForwardDeadLetteredMessagesTo(string forwardDeadLetteredMessagesTo) { }
        public NServiceBus.AzureServiceBusQueueSettings ForwardDeadLetteredMessagesTo(System.Func<string, bool> condition, string forwardDeadLetteredMessagesTo) { }
        public NServiceBus.AzureServiceBusQueueSettings LockDuration(System.TimeSpan duration) { }
        public NServiceBus.AzureServiceBusQueueSettings MaxDeliveryCount(int maxDeliveryCount) { }
        public NServiceBus.AzureServiceBusQueueSettings MaxSizeInMegabytes(NServiceBus.SizeInMegabytes maxSizeInMegabytes) { }
        public NServiceBus.AzureServiceBusQueueSettings RequiresDuplicateDetection(bool requiresDuplicateDetection) { }
        public NServiceBus.AzureServiceBusQueueSettings SupportOrdering(bool supported) { }
    }
    public class AzureServiceBusSanitizationExtensionPoint<T> : NServiceBus.Configuration.AdvanceExtensibility.ExposeSettings
        where T : NServiceBus.AzureServiceBus.Addressing.ISanitizationStrategy
    {
        public AzureServiceBusSanitizationExtensionPoint(NServiceBus.Settings.SettingsHolder settings) { }
        public NServiceBus.AzureServiceBusSanitizationExtensionPoint<T> Hash(System.Func<string, string> hash) { }
        public NServiceBus.AzureServiceBusSanitizationExtensionPoint<T> QueuePathSanitization(System.Func<string, string> queuePathSanitizer) { }
        public NServiceBus.AzureServiceBusSanitizationExtensionPoint<T> QueuePathValidation(System.Func<string, NServiceBus.AzureServiceBus.Addressing.ValidationResult> queuePathValidator) { }
        public NServiceBus.AzureServiceBusSanitizationExtensionPoint<T> RuleNameSanitization(System.Func<string, string> ruleNameSanitizer) { }
        public NServiceBus.AzureServiceBusSanitizationExtensionPoint<T> RuleNameValidation(System.Func<string, NServiceBus.AzureServiceBus.Addressing.ValidationResult> ruleNameValidator) { }
        public NServiceBus.AzureServiceBusSanitizationExtensionPoint<T> SubscriptionNameSanitization(System.Func<string, string> subscriptionNameSanitizer) { }
        public NServiceBus.AzureServiceBusSanitizationExtensionPoint<T> SubscriptionNameValidation(System.Func<string, NServiceBus.AzureServiceBus.Addressing.ValidationResult> subscriptionNameValidator) { }
        public NServiceBus.AzureServiceBusSanitizationExtensionPoint<T> TopicPathSanitization(System.Func<string, string> topicPathSanitizer) { }
        public NServiceBus.AzureServiceBusSanitizationExtensionPoint<T> TopicPathValidation(System.Func<string, NServiceBus.AzureServiceBus.Addressing.ValidationResult> topicPathValidator) { }
    }
    public class AzureServiceBusSanitizationSettings : NServiceBus.Configuration.AdvanceExtensibility.ExposeSettings
    {
        public AzureServiceBusSanitizationSettings(NServiceBus.Settings.SettingsHolder settings) { }
        public NServiceBus.AzureServiceBusSanitizationSettings UseQueuePathMaximumLength(int queuePathMaximumLength) { }
        public NServiceBus.AzureServiceBusSanitizationSettings UseRulePathMaximumLength(int rulePathMaximumLength) { }
        public NServiceBus.AzureServiceBusSanitizationExtensionPoint<T> UseStrategy<T>()
            where T : NServiceBus.AzureServiceBus.Addressing.ISanitizationStrategy { }
        public NServiceBus.AzureServiceBusSanitizationSettings UseSubscriptionPathMaximumLength(int subscriptionPathMaximumLength) { }
        public NServiceBus.AzureServiceBusSanitizationSettings UseTopicPathMaximumLength(int topicPathMaximumLength) { }
    }
    public class AzureServiceBusSubscriptionSettings : NServiceBus.Configuration.AdvanceExtensibility.ExposeSettings
    {
        public AzureServiceBusSubscriptionSettings(NServiceBus.Settings.SettingsHolder settings) { }
        public NServiceBus.AzureServiceBusSubscriptionSettings AutoDeleteOnIdle(System.TimeSpan autoDeleteOnIdle) { }
        public NServiceBus.AzureServiceBusSubscriptionSettings DefaultMessageTimeToLive(System.TimeSpan expiryTimespan) { }
        public NServiceBus.AzureServiceBusSubscriptionSettings DescriptionFactory(System.Func<string, string, NServiceBus.Settings.ReadOnlySettings, Microsoft.ServiceBus.Messaging.SubscriptionDescription> factory) { }
        public NServiceBus.AzureServiceBusSubscriptionSettings EnableBatchedOperations(bool enableBatchedOperations) { }
        public NServiceBus.AzureServiceBusSubscriptionSettings EnableDeadLetteringOnFilterEvaluationExceptions(bool enableDeadLetteringOnFilterEvaluationExceptions) { }
        public NServiceBus.AzureServiceBusSubscriptionSettings EnableDeadLetteringOnMessageExpiration(bool enableDeadLetteringOnMessageExpiration) { }
        public NServiceBus.AzureServiceBusSubscriptionSettings ForwardDeadLetteredMessagesTo(string forwardDeadLetteredMessagesTo) { }
        public NServiceBus.AzureServiceBusSubscriptionSettings ForwardDeadLetteredMessagesTo(System.Func<string, bool> condition, string forwardDeadLetteredMessagesTo) { }
        public NServiceBus.AzureServiceBusSubscriptionSettings LockDuration(System.TimeSpan lockDuration) { }
        public NServiceBus.AzureServiceBusSubscriptionSettings MaxDeliveryCount(int maxDeliveryCount) { }
    }
    public class AzureServiceBusTopicSettings : NServiceBus.Configuration.AdvanceExtensibility.ExposeSettings
    {
        public AzureServiceBusTopicSettings(NServiceBus.Settings.SettingsHolder settings) { }
        public NServiceBus.AzureServiceBusTopicSettings AutoDeleteOnIdle(System.TimeSpan autoDeleteOnIdle) { }
        public NServiceBus.AzureServiceBusTopicSettings DefaultMessageTimeToLive(System.TimeSpan timeToLive) { }
        public NServiceBus.AzureServiceBusTopicSettings DescriptionFactory(System.Func<string, NServiceBus.Settings.ReadOnlySettings, Microsoft.ServiceBus.Messaging.TopicDescription> factory) { }
        public NServiceBus.AzureServiceBusTopicSettings DuplicateDetectionHistoryTimeWindow(System.TimeSpan duplicateDetectionHistoryTimeWindow) { }
        public NServiceBus.AzureServiceBusTopicSettings EnableBatchedOperations(bool enableBatchedOperations) { }
        public NServiceBus.AzureServiceBusTopicSettings EnableExpress(bool enableExpress) { }
        public NServiceBus.AzureServiceBusTopicSettings EnableExpress(System.Func<string, bool> condition, bool enableExpress) { }
        public NServiceBus.AzureServiceBusTopicSettings EnableFilteringMessagesBeforePublishing(bool enableFilteringMessagesBeforePublishing) { }
        public NServiceBus.AzureServiceBusTopicSettings EnablePartitioning(bool enablePartitioning) { }
        public NServiceBus.AzureServiceBusTopicSettings MaxSizeInMegabytes(NServiceBus.SizeInMegabytes maxSizeInMegabytes) { }
        public NServiceBus.AzureServiceBusTopicSettings RequiresDuplicateDetection(bool requiresDuplicateDetection) { }
        public NServiceBus.AzureServiceBusTopicSettings SupportOrdering(bool supported) { }
    }
    public class AzureServiceBusTopologySettings<T> : NServiceBus.TransportExtensions<NServiceBus.AzureServiceBusTransport>
        where T : NServiceBus.AzureServiceBus.ITopology
    {
        public AzureServiceBusTopologySettings(NServiceBus.Settings.SettingsHolder settings) { }
    }
    public class AzureServiceBusTransport : NServiceBus.Transports.TransportDefinition
    {
        public AzureServiceBusTransport() { }
        public override string ExampleConnectionStringForErrorMessage { get; }
        public override bool RequiresConnectionString { get; }
        protected override NServiceBus.Transports.TransportInfrastructure Initialize(NServiceBus.Settings.SettingsHolder settings, string connectionString) { }
    }
    public class static AzureServiceBusTransportExtensions
    {
        public static void BrokeredMessageBodyType(this NServiceBus.TransportExtensions<NServiceBus.AzureServiceBusTransport> transportExtensions, NServiceBus.AzureServiceBus.SupportedBrokeredMessageBodyTypes type) { }
        public static NServiceBus.AzureServiceBusCompositionSettings Composition(this NServiceBus.TransportExtensions<NServiceBus.AzureServiceBusTransport> transportExtensions) { }
        public static void ConnectivityMode(this NServiceBus.TransportExtensions<NServiceBus.AzureServiceBusTransport> transportExtensions, Microsoft.ServiceBus.ConnectivityMode connectivityMode) { }
        public static void DefaultNamespaceName(this NServiceBus.TransportExtensions<NServiceBus.AzureServiceBusTransport> transportExtensions, string name) { }
        public static NServiceBus.AzureServiceBusIndividualizationSettings Individualization(this NServiceBus.TransportExtensions<NServiceBus.AzureServiceBusTransport> transportExtensions) { }
        public static NServiceBus.AzureServiceBusMessageReceiverSettings MessageReceivers(this NServiceBus.TransportExtensions<NServiceBus.AzureServiceBusTransport> transportExtensions) { }
        public static NServiceBus.AzureServiceBusMessageSenderSettings MessageSenders(this NServiceBus.TransportExtensions<NServiceBus.AzureServiceBusTransport> transportExtensions) { }
        public static NServiceBus.AzureServiceBusMessagingFactoriesSettings MessagingFactories(this NServiceBus.TransportExtensions<NServiceBus.AzureServiceBusTransport> transportExtensions) { }
        public static NServiceBus.AzureServiceBusNamespaceManagersSettings NamespaceManagers(this NServiceBus.TransportExtensions<NServiceBus.AzureServiceBusTransport> transportExtensions) { }
        public static NServiceBus.AzureServiceBusNamespacePartitioningSettings NamespacePartitioning(this NServiceBus.TransportExtensions<NServiceBus.AzureServiceBusTransport> transportExtensions) { }
        public static NServiceBus.AzureServiceBusNamespaceRoutingSettings NamespaceRouting(this NServiceBus.TransportExtensions<NServiceBus.AzureServiceBusTransport> transportExtensions) { }
        public static void NumberOfClientsPerEntity(this NServiceBus.TransportExtensions<NServiceBus.AzureServiceBusTransport> transportExtensions, int number) { }
        public static NServiceBus.AzureServiceBusQueueSettings Queues(this NServiceBus.TransportExtensions<NServiceBus.AzureServiceBusTransport> transportExtensions) { }
        public static NServiceBus.AzureServiceBusSanitizationSettings Sanitization(this NServiceBus.TransportExtensions<NServiceBus.AzureServiceBusTransport> transportExtensions) { }
        public static void SendViaReceiveQueue(this NServiceBus.TransportExtensions<NServiceBus.AzureServiceBusTransport> transportExtensions, bool sendViaReceiveQueue) { }
        public static NServiceBus.AzureServiceBusSubscriptionSettings Subscriptions(this NServiceBus.TransportExtensions<NServiceBus.AzureServiceBusTransport> transportExtensions) { }
        public static NServiceBus.AzureServiceBusTopicSettings Topics(this NServiceBus.TransportExtensions<NServiceBus.AzureServiceBusTransport> transportExtensions) { }
        public static void UseNamespaceNamesInsteadOfConnectionStrings(this NServiceBus.TransportExtensions<NServiceBus.AzureServiceBusTransport> transportExtensions) { }
        public static NServiceBus.AzureServiceBusTopologySettings<T> UseTopology<T>(this NServiceBus.TransportExtensions<NServiceBus.AzureServiceBusTransport> transportExtensions)
            where T : NServiceBus.AzureServiceBus.ITopology, new () { }
        public static NServiceBus.AzureServiceBusTopologySettings<T> UseTopology<T>(this NServiceBus.TransportExtensions<NServiceBus.AzureServiceBusTransport> transportExtensions, System.Func<T> factory)
            where T : NServiceBus.AzureServiceBus.ITopology { }
        public static NServiceBus.AzureServiceBusTopologySettings<T> UseTopology<T>(this NServiceBus.TransportExtensions<NServiceBus.AzureServiceBusTransport> transportExtensions, T topology)
            where T : NServiceBus.AzureServiceBus.ITopology { }
    }
    public class SizeInMegabytes
    {
        public static NServiceBus.SizeInMegabytes Size1024;
        public static NServiceBus.SizeInMegabytes Size2048;
        public static NServiceBus.SizeInMegabytes Size3072;
        public static NServiceBus.SizeInMegabytes Size4096;
        public static NServiceBus.SizeInMegabytes Size5120;
        public static NServiceBus.SizeInMegabytes Create(long sizeInMegabytes) { }
    }
}
namespace NServiceBus.Config
{
    
    [System.ObsoleteAttribute("Use code-based configuration API. Will be removed in version 8.0.0.", true)]
    public class AzureServiceBusQueueConfig : System.Configuration.ConfigurationSection
    {
        public AzureServiceBusQueueConfig() { }
    }
}